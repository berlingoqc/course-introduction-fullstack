<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on Course Introduction to Programmation for FullStack development</title><link>https://berlingoqc.github.io/course-introduction-fullstack/introduction/</link><description>Recent content in Introduction on Course Introduction to Programmation for FullStack development</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 27 May 2022 14:00:56 -0300</lastBuildDate><atom:link href="https://berlingoqc.github.io/course-introduction-fullstack/introduction/index.xml" rel="self" type="application/rss+xml"/><item><title>What is code</title><link>https://berlingoqc.github.io/course-introduction-fullstack/introduction/01-what_is_code/</link><pubDate>Fri, 27 May 2022 17:07:50 -0300</pubDate><guid>https://berlingoqc.github.io/course-introduction-fullstack/introduction/01-what_is_code/</guid><description>Programming is the implementation of logic to facilitate specified computing operations and functionality. It occurs in one or more languages, which differ by application, domain and programming model
Analogy with cooking receipe Programming is like the good old probleme solving that i did in elementary school.
You start with a basic problem or need and you write steps to accomplish it , like a cooking receipe.
When you write a cooking receipe you start with the element that you need , you defined what you need and sometime it can vary depending of the availability , personal requirement and soo one.</description></item><item><title>Different language type</title><link>https://berlingoqc.github.io/course-introduction-fullstack/introduction/02-different_flavor_of_language/</link><pubDate>Fri, 27 May 2022 17:08:48 -0300</pubDate><guid>https://berlingoqc.github.io/course-introduction-fullstack/introduction/02-different_flavor_of_language/</guid><description>Interpretted vs Compiled language In the previous chapiter i talk about how we need to convert our source code to machine code. But it&amp;rsquo;s not always the case , something a middle man is doing it for us.
The exemple that i give is in go witch is a compile language , it need to be transform into machine code and link to the required library to work. But watch this magic.</description></item><item><title>Setuping development environment</title><link>https://berlingoqc.github.io/course-introduction-fullstack/introduction/03-setuping_dev_envrionment/</link><pubDate>Fri, 27 May 2022 17:08:19 -0300</pubDate><guid>https://berlingoqc.github.io/course-introduction-fullstack/introduction/03-setuping_dev_envrionment/</guid><description>Now it&amp;rsquo;s time to work, we are gonna setup you with a development environment.
A development environment contains the following component normally:
A text editor A compiler or interpreter for your language Tooling to help you In a further chapiter we will talk about IDE (Integrated Development Environment) that bundle all of this together but for your own good we will learn to make our own IDE with great individual software, this will gave you more flexibility and understanding in the long run.</description></item><item><title>Condidition_loop_variable_type</title><link>https://berlingoqc.github.io/course-introduction-fullstack/introduction/04-condidition_loop_variable_type/</link><pubDate>Fri, 27 May 2022 17:09:46 -0300</pubDate><guid>https://berlingoqc.github.io/course-introduction-fullstack/introduction/04-condidition_loop_variable_type/</guid><description/></item><item><title>Framework_library</title><link>https://berlingoqc.github.io/course-introduction-fullstack/introduction/08-framework_library/</link><pubDate>Fri, 27 May 2022 17:10:41 -0300</pubDate><guid>https://berlingoqc.github.io/course-introduction-fullstack/introduction/08-framework_library/</guid><description/></item><item><title>Code_editor</title><link>https://berlingoqc.github.io/course-introduction-fullstack/introduction/09-ide/</link><pubDate>Fri, 27 May 2022 17:10:50 -0300</pubDate><guid>https://berlingoqc.github.io/course-introduction-fullstack/introduction/09-ide/</guid><description/></item><item><title>First_project</title><link>https://berlingoqc.github.io/course-introduction-fullstack/introduction/10-first_project/</link><pubDate>Fri, 27 May 2022 17:11:00 -0300</pubDate><guid>https://berlingoqc.github.io/course-introduction-fullstack/introduction/10-first_project/</guid><description/></item><item><title>First_project_scripting</title><link>https://berlingoqc.github.io/course-introduction-fullstack/introduction/11-first_project_scripting/</link><pubDate>Fri, 27 May 2022 17:11:09 -0300</pubDate><guid>https://berlingoqc.github.io/course-introduction-fullstack/introduction/11-first_project_scripting/</guid><description/></item></channel></rss>