<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on Course Introduction to Programmation for FullStack development</title><link>https://berlingoqc.github.io/course-introduction-fullstack/introduction/</link><description>Recent content in Introduction on Course Introduction to Programmation for FullStack development</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 27 May 2022 14:00:56 -0300</lastBuildDate><atom:link href="https://berlingoqc.github.io/course-introduction-fullstack/introduction/index.xml" rel="self" type="application/rss+xml"/><item><title>Setuping development environment</title><link>https://berlingoqc.github.io/course-introduction-fullstack/introduction/01-setuping_dev_envrionment/</link><pubDate>Fri, 27 May 2022 17:08:19 -0300</pubDate><guid>https://berlingoqc.github.io/course-introduction-fullstack/introduction/01-setuping_dev_envrionment/</guid><description>Topics of the page:
Configuration of our development environment. Now it&amp;rsquo;s time to work, we are gonna setup you with a development environment. To write code we need many tools to help us, they are all part of our development envrionment.
It contains the following component normally:
A text editor A terminal to interact with the system A compiler or interpreter for your language Tooling to help you In a further chapiter we will talk about IDE (Integrated Development Environment) that bundle all of this together but for your own good we will learn to make our own IDE with great individual software, this will gave you more flexibility and understanding in the long run.</description></item><item><title>What is code</title><link>https://berlingoqc.github.io/course-introduction-fullstack/introduction/02-what_is_code/</link><pubDate>Fri, 27 May 2022 17:07:50 -0300</pubDate><guid>https://berlingoqc.github.io/course-introduction-fullstack/introduction/02-what_is_code/</guid><description>Topics of the page:
Computer Architecture (basic) OS Architecture (basic) Source code and Machine Code Compilation The computer Explanation of the computer architecture and the different layer that build the modern operating system that we use.
Computer Architecture Modern computer have the following component that our program work with
CPU RAM GPU Storage OS Architecture !(abstraction-layer)[https://developer.ibm.com/developer/default/articles/l-linux-kernel/images/figure2.jpg]
Hardware Abstraction Layer On top of those component we have the HAL (Hardware Abstraction Layer)</description></item><item><title>Different language type</title><link>https://berlingoqc.github.io/course-introduction-fullstack/introduction/03-different_flavor_of_language/</link><pubDate>Fri, 27 May 2022 17:08:48 -0300</pubDate><guid>https://berlingoqc.github.io/course-introduction-fullstack/introduction/03-different_flavor_of_language/</guid><description>Interpretted vs Compiled language In the previous chapiter i talk about how we need to convert our source code to machine code. But it&amp;rsquo;s not always the case , something a middle man is doing it for us.
The exemple that i give is in go witch is a compile language , it need to be transform into machine code and link to the required library to work. But watch this magic.</description></item><item><title>Golang</title><link>https://berlingoqc.github.io/course-introduction-fullstack/introduction/04_golang/</link><pubDate>Fri, 27 May 2022 17:08:19 -0300</pubDate><guid>https://berlingoqc.github.io/course-introduction-fullstack/introduction/04_golang/</guid><description>Introduction to golang Why did i pick golang I don&amp;rsquo;t relly code in go anymore but i&amp;rsquo;m very found of the language and in my opinion in one of the best language to learn programming.
It as the following good point:
Very clean and simple syntax that is really easy to read Purrated list of feature to not overwhelm the user Great way of handling error Good exemple to learn about compiled language without beging hard to setup Awsome documentation and tooling.</description></item><item><title>Main programming concept</title><link>https://berlingoqc.github.io/course-introduction-fullstack/introduction/05-condidition_loop_variable_type/</link><pubDate>Fri, 27 May 2022 17:09:46 -0300</pubDate><guid>https://berlingoqc.github.io/course-introduction-fullstack/introduction/05-condidition_loop_variable_type/</guid><description>In the chapiter get your head ready we gonna start really learning the basic of programmation.
Function If you remember in the hello world exemple that we did prior we had our main function that was the entry point of our application , this function is different from other because it&amp;rsquo;s call once and not by us manually.
But normally a function is a piece of reusable code that you can call from other function in your code.</description></item><item><title>Framework_library</title><link>https://berlingoqc.github.io/course-introduction-fullstack/introduction/08-framework_library/</link><pubDate>Fri, 27 May 2022 17:10:41 -0300</pubDate><guid>https://berlingoqc.github.io/course-introduction-fullstack/introduction/08-framework_library/</guid><description/></item><item><title>Code_editor</title><link>https://berlingoqc.github.io/course-introduction-fullstack/introduction/09-ide/</link><pubDate>Fri, 27 May 2022 17:10:50 -0300</pubDate><guid>https://berlingoqc.github.io/course-introduction-fullstack/introduction/09-ide/</guid><description/></item><item><title>First_project</title><link>https://berlingoqc.github.io/course-introduction-fullstack/introduction/10-first_project/</link><pubDate>Fri, 27 May 2022 17:11:00 -0300</pubDate><guid>https://berlingoqc.github.io/course-introduction-fullstack/introduction/10-first_project/</guid><description/></item><item><title>First_project_scripting</title><link>https://berlingoqc.github.io/course-introduction-fullstack/introduction/11-first_project_scripting/</link><pubDate>Fri, 27 May 2022 17:11:09 -0300</pubDate><guid>https://berlingoqc.github.io/course-introduction-fullstack/introduction/11-first_project_scripting/</guid><description/></item></channel></rss>