[{"uri":"https://berlingoqc.github.io/course-introduction-fullstack/introduction/","title":"Introduction","tags":[],"description":"","content":"Introduction to programming The first part of the class will be about the base of programmation.\nWe will answer the following question:  What is code How do we write a program The different type of programming language The different paradigm of programming language What are the tool that we can use to write those program  For you information , this course will not rewrite all there is to know about programming i will often provide website to already existing website with the information that the student need to learn on it\u0026rsquo;s own.\nRequirement before starting This class will be write for UNIX system (MacOS and Linux) if you are using windows i recommand the following options:\n Use WSL2 Use a Virtual Machine Get the fuck out of windows your a developer now  Linux is not so user friendly and i think the best OS to start programming is MacOS, it has all the advantage that you have with linux being a unix system and it\u0026rsquo;s fairly easy to use with very good support all across the board.\n"},{"uri":"https://berlingoqc.github.io/course-introduction-fullstack/cloud/","title":"Cloud","tags":[],"description":"","content":"Introduction to the Cloud "},{"uri":"https://berlingoqc.github.io/course-introduction-fullstack/web_programing/","title":"Web_programing","tags":[],"description":"","content":"Introduction to Web Programming "},{"uri":"https://berlingoqc.github.io/course-introduction-fullstack/final_project_fullstack/","title":"Final_project_fullstack","tags":[],"description":"","content":"Final Project a FullStack application "},{"uri":"https://berlingoqc.github.io/course-introduction-fullstack/introduction/01-what_is_code/","title":"What is code","tags":[],"description":"","content":" Programming is the implementation of logic to facilitate specified computing operations and functionality. It occurs in one or more languages, which differ by application, domain and programming model\n Analogy with cooking receipe Programming is like the good old probleme solving that i did in elementary school.\nYou start with a basic problem or need and you write steps to accomplish it , like a cooking receipe.\nWhen you write a cooking receipe you start with the element that you need , you defined what you need and sometime it can vary depending of the availability , personal requirement and soo one.\nAfter that you have the instruction on how accomplish the end goal the dish.\nSometime in receipe you don\u0026rsquo;t want to repeat yourself so you link another receipe or cooking technique.\nAll those concept translate directly to concept of programming, it\u0026rsquo;s pretty mutch the same but way way more complexe.\nFor receipe we write them in our speaking language and the user of the receipt read those step and interpret them. In this case we are the computer and we understand the language directly.\nBut when it come to computer they don\u0026rsquo;t understand at all our language ou even the language that we wrote the intruction in. We need to transform our instruction to instruction that the computer will understand.\nFrom source code to machine code What the understand is Machine Code and Instruction Set\nYou may be familliar with x86 , it\u0026rsquo;s the instruction set that is use by most home computer since the 80\u0026rsquo;s (but it\u0026rsquo;s changing now with ARM like in the new MacBook M1).\nTo go from our programming language to this machine code we must use a compiler (not entirely true will see more in the next chapiter) this page give a fairly straight forward explanation.\nExemple of this process Here is an exemple of this process with the infamous hello world writting in go the language that we will use in the course.\nThis is the content of our hello_world.go source code file.\npackage main  // I\u0026#39;m a commentary , i\u0026#39;m not gonna get turn into machine code // I\u0026#39;m there so the programmer can shared some additional information  // Don\u0026#39;t bother yet with this put in order to print information to the terminal // we need to import this functionality import \u0026#34;fmt\u0026#34;  // All code instruction reside inside function , the main function in the starting // point of our application , this is what gonna get execute by the machine. // We will learn more about function in the fourth chapiter func main() {  // Call the Println function from the fmt package to write this string  // to the terminal.  fmt.Println(\u0026#34;Hello, world!\u0026#34;) } To convert this source code to machine code we need to use a compiler. Each language has it\u0026rsquo;s own compiler (sometime multiple language shared the same)\nThe go compiler is call go it\u0026rsquo;s an executable that we are gonna setup in the third chapiter when you gonna start to get your hand dirty.\nThe next snippet is not code per said , but it could be in a script (chapiter 11). Each line is a command that you type in a terminal\n # This command output is a executable file with the name hello_world # that is compile to run on the os and the architecture of our computer ➜ golang_hello_world git:(master) ✗ go build -o hello_world ./hello_world.go # When we execute the file we get the output ➜ golang_hello_world git:(master) ✗ ./hello_world Hello, world! This is the really easy step to compile go source code , not all language are that easy. In language like C and C++ we have to manually do the multiple step like converting to object and linking manually, nobody got time for that. If you want you can go learn more about compilation , machine code and assembly but it\u0026rsquo;s totally optional to learn this to become a full stack developer or most kind of developer.\nThis is our first coding exemple. We have manage to turn source code to executable how wonderful.\nIn the next chapiter we will see how this is not always the case for the user but it\u0026rsquo;s always the case for the machine.\nLecture from this chapiter  https://www.webopedia.com/definitions/compilation/ (required) https://en.wikipedia.org/wiki/Machine_code (optional) https://en.wikipedia.org/wiki/Instruction_set_architecture (optional) https://en.wikipedia.org/wiki/X86 (optional) https://getstream.io/blog/how-a-go-program-compiles-down-to-machine-code/ (very optional , advanced)  "},{"uri":"https://berlingoqc.github.io/course-introduction-fullstack/introduction/02-different_flavor_of_language/","title":"Different language type","tags":[],"description":"","content":"Interpretted vs Compiled language In the previous chapiter i talk about how we need to convert our source code to machine code. But it\u0026rsquo;s not always the case , something a middle man is doing it for us.\nThe exemple that i give is in go witch is a compile language , it need to be transform into machine code and link to the required library to work. But watch this magic.\n➜ golang_hello_world git:(master) ✗ go run hello_world.go Hello, world! Boom i don\u0026rsquo;t need to compile the source code to execute it does that mean that it\u0026rsquo;s not compile. No it\u0026rsquo;s just trickery. Behind the scene the same step are executed that in the previous chapiter it is only for pratical reason to save some step when running a small program.\nBut what is an interpretted language, let\u0026rsquo;s go straight out of wikipedia\nIn computer science, an interpreter is a computer program that directly executes instructions written in a programming or scripting language, without requiring them previously to have been compiled into a machine language program. An interpreter generally uses one of the following strategies for program execution:\n Parse the source code and perform its behavior directly; Translate source code into some efficient intermediate representation or object code and immediately execute that; Explicitly execute stored precompiled bytecode[1] made by a compiler and matched with the interpreter Virtual Machine.  I will not write more here about this , the wikipedia page does a really good explanation of everything that there is to know.\nThe big conn of interpretted language is that you need to have the interpreter install on the machine to execute the code, it\u0026rsquo;s fine in a lot of case but can be quite annoying for non technical user who need to install another application to run there application.\nThey other conn is performance but on the modern world it\u0026rsquo;s rarely an issue to have overhead with the power on modern computer.\nAnd for the pros it\u0026rsquo;s the fast iteration speed. By iteration it means that we can make modification faster and run it more easily ( but i can argue that some interpretted language are more difficul to run that compile language, looking at you python )\nI think to most reliable exemple of this is Java (hello to all Minecraft player). Java fall in the last of the case enumerate earlier. It\u0026rsquo;s a language that is compile into bytecode that is latter interpreter with the Java Virtual Machine (JVM) , what people are really talking about when they said: do you have java ?\nSpeaking trully it\u0026rsquo;s really pratical like you only need to download the jar file like for minecraft and you can execute it on linux , macos , windows name it. But for noobies it\u0026rsquo;s a annoying step to have to intall java, it\u0026rsquo;s abstract for them , i just want to play minecraft why can i just install it directly.\nAnd for me , i\u0026rsquo;m not a fan of interpreter language when i need to deploy it to user but in control environment like for server code it\u0026rsquo;s fine. That where language like go shine, in most case they don\u0026rsquo;t need anything at all other than the application to run making it really easy to deploy to thousand of computer. (you will see that a lot of tooling are writting in code for this exemple reason but not mutch in python)\nLecture from this chapiter  https://en.wikipedia.org/wiki/Interpreter_(computing)  "},{"uri":"https://berlingoqc.github.io/course-introduction-fullstack/introduction/03-setuping_dev_envrionment/","title":"Setuping development environment","tags":[],"description":"","content":"Now it\u0026rsquo;s time to work, we are gonna setup you with a development environment.\nA development environment contains the following component normally:\n A text editor A compiler or interpreter for your language Tooling to help you  In a further chapiter we will talk about IDE (Integrated Development Environment) that bundle all of this together but for your own good we will learn to make our own IDE with great individual software, this will gave you more flexibility and understanding in the long run. IDE are really usefull but me personnally i only use them when i have special need (lazyness).\n"},{"uri":"https://berlingoqc.github.io/course-introduction-fullstack/introduction/04-condidition_loop_variable_type/","title":"Condidition_loop_variable_type","tags":[],"description":"","content":""},{"uri":"https://berlingoqc.github.io/course-introduction-fullstack/introduction/05-paradigm/01-imperative/","title":"Imperative","tags":[],"description":"","content":""},{"uri":"https://berlingoqc.github.io/course-introduction-fullstack/introduction/05-paradigm/","title":"Paradigm","tags":[],"description":"","content":"Blah blah blah\n"},{"uri":"https://berlingoqc.github.io/course-introduction-fullstack/introduction/05-paradigm/02-oop/","title":"Oop","tags":[],"description":"","content":""},{"uri":"https://berlingoqc.github.io/course-introduction-fullstack/introduction/05-paradigm/03-functional/","title":"Functional","tags":[],"description":"","content":""},{"uri":"https://berlingoqc.github.io/course-introduction-fullstack/introduction/08-framework_library/","title":"Framework_library","tags":[],"description":"","content":""},{"uri":"https://berlingoqc.github.io/course-introduction-fullstack/introduction/09-ide/","title":"Code_editor","tags":[],"description":"","content":""},{"uri":"https://berlingoqc.github.io/course-introduction-fullstack/introduction/10-first_project/","title":"First_project","tags":[],"description":"","content":""},{"uri":"https://berlingoqc.github.io/course-introduction-fullstack/introduction/11-first_project_scripting/","title":"First_project_scripting","tags":[],"description":"","content":""},{"uri":"https://berlingoqc.github.io/course-introduction-fullstack/","title":"","tags":[],"description":"","content":"Get into web development This is the first course that i\u0026rsquo;m bulding to teach for a dear friend of mine who want to learn programming after his master in philosophy.\nThe starting point for this course is being a PC gamer with no prior experiences about software programming and networking. Being a PC gamer i know some things be name being confront with things from time to time.\nThe ending point would be to be knowledgeable of modern front-end development with understanding of the cloud and how to work in this modern virtual space with good understanding of deeper concept of programmation to really open all the gate for is future independent work afterward. Because the main goal should always be independant. I think of a teacher of computer science as a starter on a motor , all i need is to start the beast and unleash it.\nTopics of the course  Introduction to programmation  How do we write code from source code to executable. ( PC architecture , assembly , compiler , linker and shared library ) What are the paradigm of programming. (oop , structural , functional ) The different flavor of language. (interpreted vs compiled vs both together) Start the base of programming (condition , loop and variable type ) Object Orientated how do me organize code in 1995 (Class , interface , inheritance , polymorphism ) Functional Programming how do we not bore ourself with abstraction and classe ( first order function , mixin ) I don\u0026rsquo;t want to do things all be myself welcome to Framework and Library with the help of packet manager Doctor i need a editor to help my migrain from writing code in a basic text editor First little project an application that but all of this together Scripting is fun , i can do things other that manually :0   The cloud  What , Where and Who is the damn cloud. How do i get my code there (DNS , webserver and Paas) I\u0026rsquo;m lazy can you plz build , test and deploy this for me CI/CD We gona need a bigger ship to learn Docker How do we scale this ? kubernetes is hard or is it ?   Web programming  I just put things inside \u0026lt;\u0026gt; and i design an interface. Things getting pretty with the help of css But how do we move things , thanks go javascript is a sound language But how do we shared dynamic information help me database Time to choice a development stack for a fullstack application Get your end dirty it\u0026rsquo;s time to code mofo    The language use in this class  bash  for scripting and for being apart from normal languge\n python  for scripting in a \u0026ldquo;real\u0026rdquo; language and for dynamic typing\n go  to learn the base of programming , compilation , library and learning from the doc\n Typescript or javascript front-end  depending of the choice of the student in framework for the final project\n Typescript or go or kotlin  depending of the choice of the student in framework for the final project\nEnd goal By the end of the course the student will be able on it\u0026rsquo;s own to create a fullstack application with the following elements\n Backend Frontend CD/CI Testing Hosting Versioning  "},{"uri":"https://berlingoqc.github.io/course-introduction-fullstack/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://berlingoqc.github.io/course-introduction-fullstack/tags/","title":"Tags","tags":[],"description":"","content":""}]