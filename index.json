[{"uri":"https://berlingoqc.github.io/course-introduction-fullstack/introduction/","title":"Introduction","tags":[],"description":"","content":"Introduction to programming The first part of the class will be about the base of programmation.\nWe will answer the following question:  What is code How do we write a program The different type of programming language The different paradigm of programming language What are the tool that we can use to write those program  For you information , this course will not rewrite all there is to know about programming i will often provide website to already existing website with the information that the student need to learn on it\u0026rsquo;s own.\nRequirement before starting This class will be write for UNIX system (MacOS and Linux) if you are using windows i recommand the following options:\n Use WSL2 Use a Virtual Machine Get the fuck out of windows your a developer now  Linux is not so user friendly and i think the best OS to start programming is MacOS, it has all the advantage that you have with linux being a unix system and it\u0026rsquo;s fairly easy to use with very good support all across the board.\n"},{"uri":"https://berlingoqc.github.io/course-introduction-fullstack/cloud/","title":"Cloud","tags":[],"description":"","content":"Introduction to the Cloud "},{"uri":"https://berlingoqc.github.io/course-introduction-fullstack/web_programing/","title":"Web_programing","tags":[],"description":"","content":"Introduction to Web Programming "},{"uri":"https://berlingoqc.github.io/course-introduction-fullstack/final_project_fullstack/","title":"Final_project_fullstack","tags":[],"description":"","content":"Final Project a FullStack application "},{"uri":"https://berlingoqc.github.io/course-introduction-fullstack/introduction/01-what_is_code/","title":"What is code","tags":[],"description":"","content":" Programming is the implementation of logic to facilitate specified computing operations and functionality. It occurs in one or more languages, which differ by application, domain and programming model\n Analogy with cooking receipe Programming is like the good old probleme solving that i did in elementary school.\nYou start with a basic problem or need and you write steps to accomplish it , like a cooking receipe.\nWhen you write a cooking receipe you start with the element that you need , you defined what you need and sometime it can vary depending of the availability , personal requirement and soo one.\nAfter that you have the instruction on how accomplish the end goal the dish.\nSometime in receipe you don\u0026rsquo;t want to repeat yourself so you link another receipe or cooking technique.\nAll those concept translate directly to concept of programming, it\u0026rsquo;s pretty mutch the same but way way more complexe.\nFor receipe we write them in our speaking language and the user of the receipt read those step and interpret them. In this case we are the computer and we understand the language directly.\nBut when it come to computer they don\u0026rsquo;t understand at all our language ou even the language that we wrote the intruction in. We need to transform our instruction to instruction that the computer will understand.\nFrom source code to machine code What the understand is Machine Code and Instruction Set\nYou may be familliar with x86 , it\u0026rsquo;s the instruction set that is use by most home computer since the 80\u0026rsquo;s (but it\u0026rsquo;s changing now with ARM like in the new MacBook M1).\nTo go from our programming language to this machine code we must use a compiler (not entirely true will see more in the next chapiter) this page give a fairly straight forward explanation.\nExemple of this process Here is an exemple of this process with the infamous hello world writting in go the language that we will use in the course.\nThis is the content of our hello_world.go source code file.\npackage main  // I\u0026#39;m a commentary , i\u0026#39;m not gonna get turn into machine code // I\u0026#39;m there so the programmer can shared some additional information  // Don\u0026#39;t bother yet with this put in order to print information to the terminal // we need to import this functionality import \u0026#34;fmt\u0026#34;  // All code instruction reside inside function , the main function in the starting // point of our application , this is what gonna get execute by the machine. // We will learn more about function in the fourth chapiter func main() {  // Call the Println function from the fmt package to write this string  // to the terminal.  fmt.Println(\u0026#34;Hello, world!\u0026#34;) } To convert this source code to machine code we need to use a compiler. Each language has it\u0026rsquo;s own compiler (sometime multiple language shared the same)\nThe go compiler is call go it\u0026rsquo;s an executable that we are gonna setup in the third chapiter when you gonna start to get your hand dirty.\nThe next snippet is not code per said , but it could be in a script (chapiter 11). Each line is a command that you type in a terminal\n # This command output is a executable file with the name hello_world # that is compile to run on the os and the architecture of our computer ➜ golang_hello_world git:(master) ✗ go build -o hello_world ./hello_world.go # When we execute the file we get the output ➜ golang_hello_world git:(master) ✗ ./hello_world Hello, world! This is the really easy step to compile go source code , not all language are that easy. In language like C and C++ we have to manually do the multiple step like converting to object and linking manually, nobody got time for that. If you want you can go learn more about compilation , machine code and assembly but it\u0026rsquo;s totally optional to learn this to become a full stack developer or most kind of developer.\nThis is our first coding exemple. We have manage to turn source code to executable how wonderful.\nIn the next chapiter we will see how this is not always the case for the user but it\u0026rsquo;s always the case for the machine.\nLecture from this chapiter  https://www.webopedia.com/definitions/compilation/ (required) https://en.wikipedia.org/wiki/Machine_code (optional) https://en.wikipedia.org/wiki/Instruction_set_architecture (optional) https://en.wikipedia.org/wiki/X86 (optional) https://getstream.io/blog/how-a-go-program-compiles-down-to-machine-code/ (very optional , advanced)  "},{"uri":"https://berlingoqc.github.io/course-introduction-fullstack/introduction/02-different_flavor_of_language/","title":"Different language type","tags":[],"description":"","content":"Interpretted vs Compiled language In the previous chapiter i talk about how we need to convert our source code to machine code. But it\u0026rsquo;s not always the case , something a middle man is doing it for us.\nThe exemple that i give is in go witch is a compile language , it need to be transform into machine code and link to the required library to work. But watch this magic.\n➜ golang_hello_world git:(master) ✗ go run hello_world.go Hello, world! Boom i don\u0026rsquo;t need to compile the source code to execute it does that mean that it\u0026rsquo;s not compile. No it\u0026rsquo;s just trickery. Behind the scene the same step are executed that in the previous chapiter it is only for pratical reason to save some step when running a small program.\nBut what is an interpretted language, let\u0026rsquo;s go straight out of wikipedia\nIn computer science, an interpreter is a computer program that directly executes instructions written in a programming or scripting language, without requiring them previously to have been compiled into a machine language program. An interpreter generally uses one of the following strategies for program execution:\n Parse the source code and perform its behavior directly; Translate source code into some efficient intermediate representation or object code and immediately execute that; Explicitly execute stored precompiled bytecode[1] made by a compiler and matched with the interpreter Virtual Machine.  I will not write more here about this , the wikipedia page does a really good explanation of everything that there is to know.\nThe big conn of interpretted language is that you need to have the interpreter install on the machine to execute the code, it\u0026rsquo;s fine in a lot of case but can be quite annoying for non technical user who need to install another application to run there application.\nThey other conn is performance but on the modern world it\u0026rsquo;s rarely an issue to have overhead with the power on modern computer.\nAnd for the pros it\u0026rsquo;s the fast iteration speed. By iteration it means that we can make modification faster and run it more easily ( but i can argue that some interpretted language are more difficul to run that compile language, looking at you python )\nI think to most reliable exemple of this is Java (hello to all Minecraft player). Java fall in the last of the case enumerate earlier. It\u0026rsquo;s a language that is compile into bytecode that is latter interpreter with the Java Virtual Machine (JVM) , what people are really talking about when they said: do you have java ?\nSpeaking trully it\u0026rsquo;s really pratical like you only need to download the jar file like for minecraft and you can execute it on linux , macos , windows name it. But for noobies it\u0026rsquo;s a annoying step to have to intall java, it\u0026rsquo;s abstract for them , i just want to play minecraft why can i just install it directly.\nAnd for me , i\u0026rsquo;m not a fan of interpreter language when i need to deploy it to user but in control environment like for server code it\u0026rsquo;s fine. That where language like go shine, in most case they don\u0026rsquo;t need anything at all other than the application to run making it really easy to deploy to thousand of computer. (you will see that a lot of tooling are writting in code for this exemple reason but not mutch in python)\nLecture from this chapiter  https://en.wikipedia.org/wiki/Interpreter_(computing)  "},{"uri":"https://berlingoqc.github.io/course-introduction-fullstack/introduction/03-setuping_dev_envrionment/","title":"Setuping development environment","tags":[],"description":"","content":"Now it\u0026rsquo;s time to work, we are gonna setup you with a development environment. To write code we need many tools to help us, they are all part of our development envrionment.\nIt contains the following component normally:\n A text editor A compiler or interpreter for your language Tooling to help you  In a further chapiter we will talk about IDE (Integrated Development Environment) that bundle all of this together but for your own good we will learn to make our own IDE with great individual software, this will gave you more flexibility and understanding in the long run. IDE are really usefull but me personnally i only use them when i have special need, like integration with tooling. We will use instead a source code editor.\nFor me there is only two option for this.\n Visual Studio Code (with the vim plugin) Vim (nvim)  I\u0026rsquo;ll introduce both of them to you here and you can make your own decision. But one thing for sure you have to learn the basic of Vim.\nIntroduction to Vim Vim is a terminal based editor that exists since the time when mouse where not really a thing. It has mouse support but not by default , every thing that you what to do you must do it with shortcut. It can be very painfull at first but the speed, efficency , portability and lightness will be a huge benifice for you in the long run.\nHere is a guide to setup you up in macos with nvim a fork of vim that has better plugin support and modern feature.\nBefore we can install , i must deviate of package manager If you use linux you are already familiar with it but for macos and windows people it will be a new feature for you. A link is provide bellow to learn more about this but fastly it\u0026rsquo;s\n A package manager or package-management system is a collection of software tools that automates the process of installing, upgrading, configuring, and removing computer programs for a computer in a consistent manner\n With this you can easily with command install all the software that you need. You will see soon enought why it\u0026rsquo;s a huge deal.\nMacos does not come with a package manager but there is brew. We will install it and use it to setup your development environment.\n$ /bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026#34; Tadam you now have brew install so we can move to configure nvim and golang afterward.\nInstalling and configuration NVIM $ brew install neovim After we will create the following configuration file (this is my configuration file without what you don\u0026rsquo;t need)\n# Create this file with the following content ➜ golang_hello_world git:(master) ✗ cat $HOME/.config/nvim/init.vim set runtimepath^=~/.vim runtimepath+=~/.vim/after let \u0026amp;packpath = \u0026amp;runtimepath source ~/.vimrc   # Use this command to download VimPlug a plugin manager for vim to add extra feature # https://github.com/junegunn/vim-plug ➜ golang_hello_world git:(master) ✗ curl -fLo ~/.vim/autoload/plug.vim --create-dirs \\  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim \u0026#34; $HOME/.vimrcsyntax enableset tabstop=4set softtabstop=4set expandtabset numberset cursorlineset noswapfilefiletype indent onfiletype plugin onfiletype plugin indent onset autowriteset mouse=annoremap \u0026lt;c-z\u0026gt; \u0026lt;nop\u0026gt;map \u0026lt;C-n\u0026gt; :cnext\u0026lt;CR\u0026gt;map \u0026lt;C-m\u0026gt; :cprevious\u0026lt;CR\u0026gt;nnoremap \u0026lt;leader\u0026gt;a :cclose\u0026lt;CR\u0026gt;set laststatus=2call plug#begin(\u0026#39;~/.vim/plugged\u0026#39;)Plug \u0026#39;scrooloose/nerdtree\u0026#39;, { \u0026#39;on\u0026#39;: \u0026#39;NERDTreeToggle\u0026#39; }Plug \u0026#39;fatih/vim-go\u0026#39;, { \u0026#39;tag\u0026#39;: \u0026#39;*\u0026#39; }Plug \u0026#39;altercation/vim-colors-solarized\u0026#39;Plug \u0026#39;vim-airline/vim-airline\u0026#39;Plug \u0026#39;vim-airline/vim-airline-themes\u0026#39;Plug \u0026#39;https://github.com/mcchrish/zenbones.nvim\u0026#39;Plug \u0026#39;https://github.com/leafgarland/typescript-vim\u0026#39;Plug \u0026#39;https://github.com/Quramy/vim-js-pretty-template\u0026#39;Plug \u0026#39;https://github.com/Shougo/vimproc.vim\u0026#39;, {\u0026#39;do\u0026#39; : \u0026#39;make\u0026#39;}Plug \u0026#39;https://github.com/vim-syntastic/syntastic\u0026#39;Plug \u0026#39;https://github.com/editorconfig/editorconfig-vim\u0026#39;Plug \u0026#39;https://github.com/leafgarland/typescript-vim\u0026#39;Plug \u0026#39;neoclide/coc.nvim\u0026#39;, {\u0026#39;branch\u0026#39;: \u0026#39;release\u0026#39;}Plug \u0026#39;https://github.com/ctrlpvim/ctrlp.vim\u0026#39;Plug \u0026#39;mdempsky/gocode\u0026#39;, { \u0026#39;rtp\u0026#39;: \u0026#39;vim\u0026#39;, \u0026#39;do\u0026#39;: \u0026#39;~/.vim/plugged/gocode/vim/symlink.sh\u0026#39; }Plug \u0026#39;fatih/vim-go\u0026#39;, { \u0026#39;do\u0026#39;: \u0026#39;:GoUpdateBinaries\u0026#39; }Plug \u0026#39;udalov/kotlin-vim\u0026#39;Plug \u0026#39;https://github.com/editorconfig/editorconfig-vim\u0026#39;Plug \u0026#39;morhetz/gruvbox\u0026#39;Plug \u0026#39;lifepillar/vim-solarized8\u0026#39;Plug \u0026#39;airblade/vim-gitgutter\u0026#39;Plug \u0026#39;tpope/vim-fugitive\u0026#39;Plug \u0026#39;Xuyuanp/nerdtree-git-plugin\u0026#39;Plug \u0026#39;dracula/vim\u0026#39;, { \u0026#39;name\u0026#39;: \u0026#39;dracula\u0026#39; }Plug \u0026#39;christoomey/vim-tmux-navigator\u0026#39;Plug \u0026#39;alvan/vim-closetag\u0026#39; let g:closetag_filenames = \u0026#39;*.html,*.xhtml,*.xml,*.vue,*.phtml,*.js,*.jsx,*.coffee,*.erb\u0026#39;call plug#end()set termguicolorsset background=light \u0026#34; or darkcolorscheme forestbones:nnoremap \u0026lt;C-g\u0026gt; :NERDTreeToggle\u0026lt;CR\u0026gt;set wildignore+=*/dist/*,*/node_modules/*let g:ctrlp_working_path_mode = \u0026#39;ra\u0026#39;let g:ctrlp_map = \u0026#39;\u0026lt;c-p\u0026gt;\u0026#39;let g:ctrlp_cmd = \u0026#39;CtrlP\u0026#39;let g:ycm_rust_src_path = \u0026#39;/opt/rust/src\u0026#39;let g:typescript_compiler_binary = \u0026#39;tsc\u0026#39;let g:typescript_compiler_options = \u0026#39;\u0026#39;autocmd QuickFixCmdPost [^l]* nested cwindowautocmd QuickFixCmdPost l* nested cwindowautocmd FileType typescript syn clear foldBracesset statusline+=%#warningmsg#set statusline+=%{SyntasticStatuslineFlag()}set statusline+=%*let g:syntastic_check_on_open = 1let g:syntastic_check_on_wq = 0let g:tsuquyomi_disable_quickfix = 1let g:syntastic_typescript_checkers = [\u0026#39;tsuquyomi\u0026#39;]if !exists(\u0026#39;g:syntastic_html_tidy_ignore_errors\u0026#39;) let g:syntastic_html_tidy_ignore_errors = []endiflet g:syntastic_html_tidy_ignore_errors += [ \u0026#34;\u0026lt;alb-\u0026#34;, \u0026#34;discarding unexpected \u0026lt;/alb-\u0026#34;]let g:syntastic_html_tidy_ignore_errors += [ \u0026#34;\u0026lt;ng-\u0026#34;, \u0026#34;discarding unexpected \u0026lt;/ng-\u0026#34;]let g:syntastic_html_tidy_ignore_errors += [ \u0026#34;\u0026lt;mat-\u0026#34;, \u0026#34;discarding unexpected \u0026lt;/mat-\u0026#34;]let g:syntastic_html_tidy_ignore_errors += [ \u0026#34;\u0026lt;app-\u0026#34;, \u0026#34;discarding unexpected \u0026lt;/app-\u0026#34;]let g:go_fmt_command = \u0026#34;goimports\u0026#34;let g:go_def_mode = \u0026#39;gopls\u0026#39;let g:go_info_mode = \u0026#39;gopls\u0026#39;let g:coc_disable_startup_warning = 1\u0026#34; -------------------------------------------------------------------------------------------------\u0026#34; \u0026#34; coc.nvim default settings\u0026#34; \u0026#34;\u0026#34; -------------------------------------------------------------------------------------------------\u0026#34; if hidden is not set, TextEdit might fail.set hidden\u0026#34; \u0026#34; Better display for messagesset cmdheight=2\u0026#34; \u0026#34; Smaller updatetime for CursorHold \u0026amp; CursorHoldIset updatetime=300\u0026#34; \u0026#34; don\u0026#39;t give |ins-completion-menu| messages.set shortmess+=c\u0026#34; \u0026#34; always show signcolumnsset signcolumn=yes\u0026#34;\u0026#34; \u0026#34; Use tab for trigger completion with characters ahead and navigate.\u0026#34; \u0026#34; Use command \u0026#39;:verbose imap \u0026lt;tab\u0026gt;\u0026#39; to make sure tab is not mapped by other\u0026#34; plugin.inoremap \u0026lt;silent\u0026gt;\u0026lt;expr\u0026gt; \u0026lt;TAB\u0026gt; \\ pumvisible() ? \u0026#34;\\\u0026lt;C-n\u0026gt;\u0026#34; : \\ \u0026lt;SID\u0026gt;check_back_space() ? \u0026#34;\\\u0026lt;TAB\u0026gt;\u0026#34; : \\ coc#refresh()inoremap \u0026lt;expr\u0026gt;\u0026lt;S-TAB\u0026gt; pumvisible() ? \u0026#34;\\\u0026lt;C-p\u0026gt;\u0026#34; : \u0026#34;\\\u0026lt;C-h\u0026gt;\u0026#34;function! s:check_back_space() abort let col = col(\u0026#39;.\u0026#39;) - 1 return !col || getline(\u0026#39;.\u0026#39;)[col - 1] =~# \u0026#39;\\s\u0026#39;endfunction\u0026#34; \u0026#34; Use \u0026lt;c-space\u0026gt; to trigger completion.inoremap \u0026lt;silent\u0026gt;\u0026lt;expr\u0026gt; \u0026lt;c-space\u0026gt; coc#refresh()\u0026#34;\u0026#34; \u0026#34; Use `[c` and `]c` to navigate diagnosticsnmap \u0026lt;silent\u0026gt; [c \u0026lt;Plug\u0026gt;(coc-diagnostic-prev)nmap \u0026lt;silent\u0026gt; ]c \u0026lt;Plug\u0026gt;(coc-diagnostic-next)\u0026#34;\u0026#34; \u0026#34; Remap keys for gotosnmap \u0026lt;silent\u0026gt; gd \u0026lt;Plug\u0026gt;(coc-definition)nmap \u0026lt;silent\u0026gt; gy \u0026lt;Plug\u0026gt;(coc-type-definition)nmap \u0026lt;silent\u0026gt; gi \u0026lt;Plug\u0026gt;(coc-implementation)nmap \u0026lt;silent\u0026gt; gr \u0026lt;Plug\u0026gt;(coc-references)\u0026#34;\u0026#34; \u0026#34; Use U to show documentation in preview windownnoremap \u0026lt;silent\u0026gt; U :call \u0026lt;SID\u0026gt;show_documentation()\u0026lt;CR\u0026gt;\u0026#34;\u0026#34; \u0026#34; Remap for rename current wordnmap \u0026lt;leader\u0026gt;rn \u0026lt;Plug\u0026gt;(coc-rename)\u0026#34;\u0026#34; \u0026#34; Remap for format selected regionvmap \u0026lt;leader\u0026gt;f \u0026lt;Plug\u0026gt;(coc-format-selected)nmap \u0026lt;leader\u0026gt;f \u0026lt;Plug\u0026gt;(coc-format-selected)\u0026#34; \u0026#34; Show all diagnosticsnnoremap \u0026lt;silent\u0026gt; \u0026lt;space\u0026gt;a :\u0026lt;C-u\u0026gt;CocList diagnostics\u0026lt;cr\u0026gt;\u0026#34; \u0026#34; Manage extensionsnnoremap \u0026lt;silent\u0026gt; \u0026lt;space\u0026gt;e :\u0026lt;C-u\u0026gt;CocList extensions\u0026lt;cr\u0026gt;\u0026#34; \u0026#34; Show commandsnnoremap \u0026lt;silent\u0026gt; \u0026lt;space\u0026gt;c :\u0026lt;C-u\u0026gt;CocList commands\u0026lt;cr\u0026gt;\u0026#34; \u0026#34; Find symbol of current documentnnoremap \u0026lt;silent\u0026gt; \u0026lt;space\u0026gt;o :\u0026lt;C-u\u0026gt;CocList outline\u0026lt;cr\u0026gt;\u0026#34; \u0026#34; Search workspace symbolsnnoremap \u0026lt;silent\u0026gt; \u0026lt;space\u0026gt;s :\u0026lt;C-u\u0026gt;CocList -I symbols\u0026lt;cr\u0026gt;\u0026#34; \u0026#34; Do default action for next item.nnoremap \u0026lt;silent\u0026gt; \u0026lt;space\u0026gt;j :\u0026lt;C-u\u0026gt;CocNext\u0026lt;CR\u0026gt;\u0026#34; \u0026#34; Do default action for previous item.nnoremap \u0026lt;silent\u0026gt; \u0026lt;space\u0026gt;k :\u0026lt;C-u\u0026gt;CocPrev\u0026lt;CR\u0026gt; \u0026#34; \u0026#34; Resume latest coc listnnoremap \u0026lt;silent\u0026gt; \u0026lt;space\u0026gt;p :\u0026lt;C-u\u0026gt;CocListResume\u0026lt;CR\u0026gt;Open nvim and enter the following command to install the plugin :PlugInstall\nYou should now be all setup to start coding with vim.\nInstall on configure go $ brew install go # You should now be have the go binary # You can try it and see the version ➜ golang_hello_world git:(master) ✗ go version go version go1.18.1 darwin/amd64 Exercice  vitutor Do the hello world program with vim and go  Things to read  https://www.tutorialspoint.com/vim/index.htm https://en.wikipedia.org/wiki/Package_manager https://octetz.com/docs/2019/2019-04-24-vim-as-a-go-ide/  "},{"uri":"https://berlingoqc.github.io/course-introduction-fullstack/introduction/03_golang/","title":"Golang","tags":[],"description":"","content":"Introduction to golang Why did i pick golang I don\u0026rsquo;t relly code in go anymore but i\u0026rsquo;m very found of the language and in my opinion in one of the best language to learn programming.\nIt as the following good point:\n Very clean and simple syntax that is really easy to read Purrated list of feature to not overwhelm the user Great way of handling error Good exemple to learn about compiled language without beging hard to setup Awsome documentation and tooling. Not a fragmented ecosystem Go very well with vim Fun and enjoyable for all of the reason above.  Also for the context of web application for full stack i could have go with a high level language and more dynamic language like Kotlin, Typescript, Python but i prefer go to be allow to also teach some more low level programming that interfer with memory more closely but not to mutch. And we will be able to build MVC style Rest API farelly easily.\nWhat kind of language is go Lets for a another time bring the first sentance from wikipedia. And split in down for you to understanding all of the jargon.\n Go is a statically typed, compiled programming language designed at Google by Robert Griesemer, Rob Pike, and Ken Thompson.It is syntactically similar to C, but with memory safety, garbage collection, structural typing,[5] and CSP-style concurrency.[12] It is often referred to as Golang because of its former domain name, golang.org, but its proper name is Go.\n Statically Typed. We didnt talk about type and variable yet. Let\u0026rsquo;s do a small introduction to variable and type.\nA variable is a \u0026quot;\u0026quot; that is use to store a value. Like a mathematical exemple x = 5. We call this an assignment.\nWe put the value of 5 inside a variable call x. After this we can use this variable for calculation.\nHere is a small exemple in go.\n// We assign 5 to the variable x func main() {  x := 5  fmt.PrintLn(\u0026#34;x = \u0026#34; + x)  fmt.PrintLn(\u0026#34;x * x = \u0026#34; + (x * x)) } $ go run exemple_variable.go x = 5 x * x = 25 Here there is two new concept. First we use a string (a list of character between the \u0026ldquo;\u0026rdquo;) and we additinal the result of the multiplication of x * x to the string to get the result that is shown.\nLets go back to the variable x it receive the value of 5 witch is a hole number. So the variable x is an Integer. In a language like go all variable must have a type and only value of this type can be assign to the variable\n// := tell that we create a new variable and go infer the type with the value pass of the right side x := 5 // We could explicitly tell go compiler that the variable is an Integer var y: Int = 3 // this is valide  var x: Int = \u0026#34;a string\u0026#34; // this is invalid you must pass a Integer to x , the compiler will not accept that // You can reassign the value of the variable , since y and x are integer we can pass the value of x to y // so now the value of y is 5 instead of 3 y = x  // Invalid , we must prove a Integer y = \u0026#34;string\u0026#34; to go back to what is statically typed , that mean first that every variable must have a type when creating the variable, you can leave the variable empty (no value) but it must have a type. The reason for that is that the program will allocate memory based on the size of the type. Each type have specific size in memory (RAM).\nSecondly it also mean that the type of a variable cannot change in the scope (will talk later about scope and stack) because this would possibly overflow the memory. Like a Integer take 64 bit of memory but a string could take 1..N bit of memory since it\u0026rsquo;s a list of character so if the compiler would allowed use to put the string in the integer we would overflow the memory allocated and corrupt something else possibly.\nStatically Typed is in oposition to dynamically typed witch is more commun with interpreted language like python or javascript is those language the compiler does care about what you put in your variable you can reassign it with different type and etc..\nThe advantage of statically type is that the compiler and your code editor always knwo the type so it can optimize and gave you special recommandation about the option of what you can or cannot do with it. It leave less space for error.\nWill see later on in web development but language have been build on top of javascript to add typing to facilitate the work by big team and to catch possible error at compile time instead that a runtime.\nSorry this part is heavy yet in information , don\u0026rsquo;t worry ask question and you will understand at some point.\nMemory safety I cover a little bit of this in the previous section. But a memory safety language is made to protect you agains error like buffer overlow (when you try to access memory bewound what is allocated and some other things)\nGarbage collection Most language have this feature in one way or another. Except language like C and C++. Garbage collection is code that run with your code to clean the memory of things that are no longer use by your program. Like in the exemple prior when i\u0026rsquo;m done using x , the garbage collection will remove the variable from memory to free up space. This is half true , when we will learn about Scope, Stack and Heap this will make more sence.\nIn language like C when you allocate a block a memory you are responsible to clear it when done using it, if not your program will start to use more and more of memory and nobody want this , except maybe hacker.\nThe conn of the garbage collector is that it run after you code from time to time to clear the memory, this introduce some latency to your application and in some really high reactive application this can be an issue. But take my world it may never be a issue for most of us.\nSome modern language like Rust and Modern C++ have garbage collection without garbage collection with a principale of Ownership or Smart Pointer. To cut it short they keep reference of how is using it and when it drop to zero they delete it from memory.\nStructural typing We will come back to this latter on in the pradigm section of the course.\nConcurrent CSP style A concurrent language mean that the language can run multiple task at the same time. In different core of the computer or inside the same core. This break the linearity of the code. We will not go to deep in this for now but go have a awsome and simple to use system to run code concurrently.\nThing to read  https://en.wikipedia.org/wiki/Go_(programming_language) https://en.wikipedia.org/wiki/Memory_safety https://en.wikipedia.org/wiki/Garbage_collection_(computer_science) https://en.wikipedia.org/wiki/Structural_type_system https://en.wikipedia.org/wiki/Concurrency_(computer_science)  "},{"uri":"https://berlingoqc.github.io/course-introduction-fullstack/introduction/04-condidition_loop_variable_type/","title":"Main programming concept","tags":[],"description":"","content":"In the chapiter get your head ready we gonna start really learning the basic of programmation.\nFunction If you remember in the hello world exemple that we did prior we had our main function that was the entry point of our application , this function is different from other because it\u0026rsquo;s call once and not by us manually.\nBut normally a function is a piece of reusable code that you can call from other function in your code. Because all statement reside inside of function.\nWhat is a statement We said them earlier but a statement is when you do a logical action (NEED REAL DEFINITION), like assign a variable , do a calculation and etc.. All that make the code moving. The pretty mutch all reside inside function except some static variable definition.\nBack to function A function is define by it\u0026rsquo; signature.\nA signature is compose of:\n The availability (private vs public vs other things depending of the language) The name of the function It\u0026rsquo;s argument It\u0026rsquo;s return type  In some language and other case there is other information in the signature but dont worry for now.\nHere is an exemple of a function.\n// The signature , this function take one argument x of type Int and return another Int. // Function can have multiple argument of different type and the always return One value // But we will learn latter that One value can be multiple value func power(x: Int): Int {  return x * x }  func main() {   x := 5  power_of_x := power(x)   // This will print 25  fmt.PrintLn(power_of_x)   // We dont have to assign the result of the function call the a variable we can pass it  // directly to a another function.  // this return the same result.  fmt.PrintLn(power(5)) } There is lot more to learn and that we can do with function but this is the basic for now.\nScope The scope is like your current context, it defined what is available to you.\nWe will start with the previous exemple.\n // The first scope is the file your in  // Here we defined a constant variable in the base of the file // this will be available to every one in the file. const y := 5  // A scope is defined between {} so a function has it\u0026#39;s own scope func mystery_calculation(x: Int): Int {  // In my scope i have the variale x defined with my arguments  // And i call access y the global scope  return x * y }  func main() {  // In the scope of my main function i declare g  g := 5  // I create a second scope  {  // In the new scope a create the variable h  h := g * y  }  // Here i quit the scope , so the variable h is no longer there because it was living in the  // inside scope, we will lean more about this with the Stack in the next section.  // this will throw an error because h is not defined  k := h * g } Stack and Heap Stack and the Heap are two fondamental concept on how your software work and here are data store in the memory and how your programm is being run. I guess you can be a web developer without really know mutch about this but it does not hurt to know about this.\nThe stack and the Heap are the two place where youre program store it\u0026rsquo;s variable.\nThe stack is like a pile of plate , when you put stuff on the stack it\u0026rsquo;s pile up and when you remove stuff it\u0026rsquo;s always the last element added.\nThe stack and the scope are link together. When you enter a scope and you create variable it\u0026rsquo;s added to the stack end when the scope end. All variable created in the scope are remove from the stack. So when you enter a function , enter a new scope block it\u0026rsquo;s get added to the stack and when you leave this scope , all things created are deleted.\nThis is great but what do we do when we need to create variable of dynamic size that persist there scope. In those case we must use the heap. The heap is what\u0026rsquo;s getting garbage collected.\n(WIP more info on the heap i\u0026rsquo;m a noob without internet)\nDifferent type We only talk for now about two type : Int and String. But there is many more type and most of the programming job you will have to do is create new type to represent some more complex value.\nFirst we have the primitive type. Those type all have a fixed size in memory and are store in the stack (????)\n Int Float Boolean Char \u0026hellip;  After we have the \u0026ldquo;???\u0026rdquo; type.\n String : a list of character, text Struct : A structure in a ensemble of multiple property that all have a type and name. Tuple : It\u0026rsquo;s a collection of type without name Array : It\u0026rsquo;s a list of value of a particuliar type Map : Map is a collection of Key and Value. All key have the same type and all value have the same type. Typealias : When we create a alias of a particular type for syntastic reason.  struct Time {  hour: Int,  minute: Int,  second: Int }  func main() {  a_int := 5  a_float := 0.5  a_boolean := true  a_char := \u0026#39;d\u0026#39;  a_string := \u0026#34;I\u0026#39;m a string motherlover\u0026#34;   a_struct_time := Time {  hour: 5,  minute: 40,  second: 34  }   # You can access your property  g := a_struct_time.hour   a_array_float = [0.4, 0.5, 0.7, 0.7]   # You can acces an array by index  x := a_array_float[1] # the first index is zero so the variable x gonna have the value of 0.5 and a float type   a_map = {  \u0026#34;claude\u0026#34;: 50,  \u0026#34;mario\u0026#34;: 40  }   y := a_map[\u0026#34;mario\u0026#34;] # you access with the key , so the value of y gonna be 40  } From this point in the tutorial . I\u0026rsquo;ll do a guide video on doing the go tour that you can go check on your own. It will teach more in detail what i started to teach in this and give your on good exemple of all the condition and loop things.\nStandard Library  https://pkg.go.dev/std   A standard library in computer programming is the library made available across implementations of a programming language.\n This is normally part of the language and maintan by the same team that build the language.\nAll of the function from the standard library can be use anywhere and most other library that we will cover are based on those functionallity.\nSmall comeback to the compilation. The standard library is ship inside your exuctable with your code. It is statically link like all library that are written in go.\nWe will explore some on them in the live exemple and in the homework.\nWe aready use a package of the std (standard library) the fmt package to write to the terminal.\nLive Exercice  https://go.dev/tour/welcome/1 https://gobyexample.com/ (Complete to the Method section, read the code and try it localy if you want)  Homework Now with all that we learn today we can try to make a small homework application to put all of this together. I will gave some exemple of starting point to create logic with interaction with the user to generate some kind on modify ouput data.\nLike this exemple:\nWrite a program with a variable called age assigned to an integer that prints different strings depending on what integer age is.\nThe program will have the following flow:\n Ask the user the age of the person requiring advive. (May ask for more data to foreast it\u0026rsquo;s prediciton) Print some kind of predicition based on the given data. Most only use functionality from the standard library.  Optional extra\n Give a prediciton based on the day. (The result is always the same for a name and a date)  For this appli\nCode snippet to get your started Ask for a answer from the Things to read  https://gobyexample.com/   "},{"uri":"https://berlingoqc.github.io/course-introduction-fullstack/introduction/05-paradigm/01-imperative/","title":"Imperative","tags":[],"description":"","content":""},{"uri":"https://berlingoqc.github.io/course-introduction-fullstack/introduction/05-paradigm/","title":"Paradigm","tags":[],"description":"","content":"Blah blah blah\n"},{"uri":"https://berlingoqc.github.io/course-introduction-fullstack/introduction/05-paradigm/02-oop/","title":"Oop","tags":[],"description":"","content":""},{"uri":"https://berlingoqc.github.io/course-introduction-fullstack/introduction/05-paradigm/03-functional/","title":"Functional","tags":[],"description":"","content":""},{"uri":"https://berlingoqc.github.io/course-introduction-fullstack/introduction/08-framework_library/","title":"Framework_library","tags":[],"description":"","content":""},{"uri":"https://berlingoqc.github.io/course-introduction-fullstack/introduction/09-ide/","title":"Code_editor","tags":[],"description":"","content":""},{"uri":"https://berlingoqc.github.io/course-introduction-fullstack/introduction/10-first_project/","title":"First_project","tags":[],"description":"","content":""},{"uri":"https://berlingoqc.github.io/course-introduction-fullstack/introduction/11-first_project_scripting/","title":"First_project_scripting","tags":[],"description":"","content":""},{"uri":"https://berlingoqc.github.io/course-introduction-fullstack/","title":"","tags":[],"description":"","content":"Get into web development This is the first course that i\u0026rsquo;m bulding to teach for a dear friend of mine who want to learn programming after his master in philosophy.\nThe starting point for this course is being a PC gamer with no prior experiences about software programming and networking. Being a PC gamer i know some things be name being confront with things from time to time.\nThe ending point would be to be knowledgeable of modern front-end development with understanding of the cloud and how to work in this modern virtual space with good understanding of deeper concept of programmation to really open all the gate for is future independent work afterward. Because the main goal should always be independant. I think of a teacher of computer science as a starter on a motor , all i need is to start the beast and unleash it.\nTopics of the course  Introduction to programmation  How do we write code from source code to executable. ( PC architecture , assembly , compiler , linker and shared library ) What are the paradigm of programming. (oop , structural , functional ) The different flavor of language. (interpreted vs compiled vs both together) Start the base of programming (condition , loop and variable type ) Object Orientated how do me organize code in 1995 (Class , interface , inheritance , polymorphism ) Functional Programming how do we not bore ourself with abstraction and classe ( first order function , mixin ) I don\u0026rsquo;t want to do things all be myself welcome to Framework and Library with the help of packet manager Doctor i need a editor to help my migrain from writing code in a basic text editor First little project an application that but all of this together Scripting is fun , i can do things other that manually :0   The cloud  What , Where and Who is the damn cloud. How do i get my code there (DNS , webserver and Paas) I\u0026rsquo;m lazy can you plz build , test and deploy this for me CI/CD We gona need a bigger ship to learn Docker How do we scale this ? kubernetes is hard or is it ?   Web programming  I just put things inside \u0026lt;\u0026gt; and i design an interface. Things getting pretty with the help of css But how do we move things , thanks go javascript is a sound language But how do we shared dynamic information help me database Time to choice a development stack for a fullstack application Get your end dirty it\u0026rsquo;s time to code mofo    The language use in this class  bash  for scripting and for being apart from normal languge\n python  for scripting in a \u0026ldquo;real\u0026rdquo; language and for dynamic typing\n go  to learn the base of programming , compilation , library and learning from the doc\n Typescript or javascript front-end  depending of the choice of the student in framework for the final project\n Typescript or go or kotlin  depending of the choice of the student in framework for the final project\nEnd goal By the end of the course the student will be able on it\u0026rsquo;s own to create a fullstack application with the following elements\n Backend Frontend CD/CI Testing Hosting Versioning  Warning This course in strongly opiniated. I will tell my experience what i dislike and what i like. Do not take all of this for granted. I feel strongly that i may be wrong and other developer must feel different about those topic.\nWhat i like:\n POSIX Modularity Open source Typed language Compile language  What i dislike:\n Most interpreted language Fragmented language Dynamically type language Big fat IDE Propretary environment Windows  "},{"uri":"https://berlingoqc.github.io/course-introduction-fullstack/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://berlingoqc.github.io/course-introduction-fullstack/tags/","title":"Tags","tags":[],"description":"","content":""}]